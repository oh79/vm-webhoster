version: '3.8'

services:
  # PostgreSQL 데이터베이스
  db:
    image: postgres:14-alpine
    container_name: webhoster_db
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-webhoster_db}
      POSTGRES_USER: ${POSTGRES_USER:-webhoster_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-webhoster_pass}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "${BIND_ADDRESS:-0.0.0.0}:5432:5432"
    networks:
      - webhoster_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-webhoster_user} -d ${POSTGRES_DB:-webhoster_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
    dns:
      - 8.8.8.8
      - 8.8.4.4
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # 백엔드 API 서버
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: webhoster_backend
    env_file:
      - .env
    environment:
      # 데이터베이스 설정
      - DATABASE_URL=${DATABASE_URL:-postgresql://webhoster_user:webhoster_pass@db:5432/webhoster_db}
      # JWT 설정
      - SECRET_KEY=${SECRET_KEY:-super-secret-jwt-key-change-in-production-12345}
      - ALGORITHM=${ALGORITHM:-HS256}
      - ACCESS_TOKEN_EXPIRE_MINUTES=${ACCESS_TOKEN_EXPIRE_MINUTES:-1440}
      # VM 관리 설정
      - VM_IMAGE_PATH=${VM_IMAGE_PATH:-/app/vm-images}
      - VM_BRIDGE_NAME=${VM_BRIDGE_NAME:-virbr0}
      - VM_TEMPLATE_IMAGE=${VM_TEMPLATE_IMAGE:-ubuntu-22.04-cloud.qcow2}
      - SSH_PORT_RANGE_START=${SSH_PORT_RANGE_START:-10000}
      - SSH_PORT_RANGE_END=${SSH_PORT_RANGE_END:-20000}
      - NGINX_CONFIG_PATH=${NGINX_CONFIG_PATH:-/app/nginx-configs}
      - SERVICE_DOMAIN=${SERVICE_DOMAIN:-220.149.241.197:80}
      # 개발 설정
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - DEBUG=${DEBUG:-true}
      # 프로젝트 정보
      - PROJECT_NAME=${PROJECT_NAME:-웹 호스팅 서비스}
      - VERSION=${VERSION:-1.0.0}
      - DESCRIPTION=${DESCRIPTION:-Docker 기반 웹 호스팅 서비스}
      # API 설정
      - API_HOST=${API_HOST:-0.0.0.0}
      - API_PORT=${API_PORT:-8000}
      - CORS_ORIGINS=${CORS_ORIGINS:-["*"]}
      # Redis 설정
      - REDIS_URL=${REDIS_URL:-redis://redis:6379/0}
    volumes:
      - vm_images:/app/vm-images
      - nginx_configs:/app/nginx-configs
      - webhoster_logs:/var/log/webhoster
      # 개발용 코드 마운트 (주석 처리하여 권한 문제 방지)
      # - ./backend:/app:ro
      # VM 관리를 위한 libvirt 소켓 마운트 (PRD 요구사항)
      # - /var/run/libvirt/libvirt-sock:/var/run/libvirt/libvirt-sock
      # - /var/lib/libvirt/images:/var/lib/libvirt/images
    ports:
      - "${BIND_ADDRESS:-0.0.0.0}:${API_PORT:-8000}:${API_PORT:-8000}"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - webhoster_network
    restart: unless-stopped
    # privileged: true  # VM 관리를 위한 권한 (일시 비활성화)
    # devices:
    #   - /dev/kvm:/dev/kvm  # KVM 가상화 지원 (일시 비활성화)
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${API_PORT:-8000}/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    dns:
      - 8.8.8.8
      - 8.8.4.4
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"

  # Nginx 리버스 프록시
  nginx:
    image: nginx:alpine
    container_name: webhoster_nginx
    env_file:
      - .env
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - nginx_configs:/etc/nginx/sites-available/hosting:ro
      - nginx_logs:/var/log/nginx
      - ./nginx/static:/usr/share/nginx/html/static:ro
    ports:
      - "${BIND_ADDRESS:-0.0.0.0}:80:80"
      - "${BIND_ADDRESS:-0.0.0.0}:443:443"
      # PRD 요구사항: SSH 포트 범위 확장 (동시 사용자 100명+)
      - "${BIND_ADDRESS:-0.0.0.0}:${SSH_PORT_RANGE_START:-10000}-${SSH_PORT_RANGE_END:-20000}:${SSH_PORT_RANGE_START:-10000}-${SSH_PORT_RANGE_END:-20000}"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - webhoster_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3
    dns:
      - 8.8.8.8
      - 8.8.4.4
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis (캐싱 및 세션 저장용)
  redis:
    image: redis:7-alpine
    container_name: webhoster_redis
    env_file:
      - .env
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf:ro  # 성능 최적화
    ports:
      - "${BIND_ADDRESS:-0.0.0.0}:6379:6379"
    networks:
      - webhoster_network
    restart: unless-stopped
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    dns:
      - 8.8.8.8
      - 8.8.4.4
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # 프론트엔드 (개발용)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: webhoster_frontend
    env_file:
      - .env
    environment:
      # API 설정 통일: 공백으로 설정하여 상대 경로 사용 (Nginx 프록시)
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-}
      - NODE_ENV=${NODE_ENV:-development}
      # PRD 성능 요구사항 지원
      - NEXT_TELEMETRY_DISABLED=1
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "${BIND_ADDRESS:-0.0.0.0}:3000:3000"
    networks:
      - webhoster_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # 모니터링 시스템 (PRD 요구사항: 99.9% 가용성)
  monitoring:
    image: prom/prometheus:latest
    container_name: webhoster_monitoring
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "${BIND_ADDRESS:-0.0.0.0}:9090:9090"
    networks:
      - webhoster_network
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

# 볼륨 정의
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  vm_images:
    driver: local
  nginx_configs:
    driver: local
  cloud_init_data:
    driver: local
  webhoster_logs:
    driver: local
  nginx_logs:
    driver: local
  prometheus_data:  # 모니터링 데이터
    driver: local

# 네트워크 정의
networks:
  webhoster_network:
    driver: bridge
    ipam:
      config:
        - subnet: ${NETWORK_SUBNET:-172.18.0.0/16} 